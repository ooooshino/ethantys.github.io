<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ooooshino的🛖</title>
  
  <subtitle>拥抱大势的同时，也要有独立思考的自我</subtitle>
  <link href="https://oshino.cc/atom.xml" rel="self"/>
  
  <link href="https://oshino.cc/"/>
  <updated>2021-12-15T04:37:28.172Z</updated>
  <id>https://oshino.cc/</id>
  
  <author>
    <name>ooooshino</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>margin collapse &amp; BFC</title>
    <link href="https://oshino.cc/2021/10/18/margin%20collapse%20&amp;%20BFC/"/>
    <id>https://oshino.cc/2021/10/18/margin%20collapse%20&amp;%20BFC/</id>
    <published>2021-10-18T15:23:00.000Z</published>
    <updated>2021-12-15T04:37:28.172Z</updated>
    
    <content type="html"><![CDATA[<h2 id="外边距重叠"><a href="#外边距重叠" class="headerlink" title="外边距重叠"></a>外边距重叠</h2><ul><li>外边距重叠（英文margin collapse，MDN 的解释如下：  块的顶部和底部边距有时合并(折叠)为单个边距，其大小是单个边距(或者是单个边距中最大的一个，如果它们相等的话)，这种行为称为边距折叠。注意，浮动和绝对定位元素的边距永远不会崩溃。</li></ul><p>这种情况并不是浏览器的bug，而是为某些情景而设计的，如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">&quot;design&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        Lorem ipsum dolor sit amet consectetur adipisicing elit. Quisquam harum</span><br><span class="line">        voluptas ullam, quia veniam sunt in maiores optio laboriosam, earum</span><br><span class="line">        minus veritatis deserunt delectus repellendus eaque nostrum vitae! Amet,</span><br><span class="line">        alias.</span><br><span class="line">      <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        Lorem ipsum, dolor sit amet consectetur adipisicing elit. Necessitatibus</span><br><span class="line">        ipsam asperiores beatae facere adipisci quos nulla, officiis, fugiat</span><br><span class="line">        perspiciatis delectus temporibus aperiam a iste. Odit corporis</span><br><span class="line">        recusandae fugiat quasi tempore?</span><br><span class="line">      <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        Lorem ipsum dolor sit amet consectetur adipisicing elit. Temporibus ut</span><br><span class="line">        magni commodi accusamus eligendi amet dolorum vel, culpa facilis non.</span><br><span class="line">        Doloribus labore nemo deserunt explicabo quasi distinctio minus quo eum!</span><br><span class="line">      <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        Lorem ipsum dolor sit amet consectetur adipisicing elit. Nulla, libero</span><br><span class="line">        nisi dicta culpa perferendis et quasi, error, ullam magni ratione</span><br><span class="line">        praesentium. Iste esse ducimus voluptatum quae? Animi doloribus omnis</span><br><span class="line">        voluptas.</span><br><span class="line">      <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/d5124d8c-3dc2-4e80-bbbc-f28d0a94cd52/Untitled.png" alt="Untitled"></p><p>为了让段落分明，一般会给上margin</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">p&#123;</span><br><span class="line">text-indent: 2em;  /* 顺便让其首行文本的缩进2个em看着舒服些 */</span><br><span class="line">    margin: 1.7em 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/742650f4-3cdb-4df1-a2d7-5668c1085509/Untitled.png" alt="Untitled"></p><p>当你打开控制台查看p标签的时候，会发现他们间隔是一样的，也就是为了这种情况而设计的，不过也产生了一种生产环境经常遇到的“bug”，叫margin collapse，也就是外边距重叠了</p><p><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/36352ede-5ef5-484a-9699-f49301c1ebcc/ezgif-4-cb26987608ab.gif" alt="ezgif-4-cb26987608ab.gif"></p><h3 id="外边距重叠的三种情况"><a href="#外边距重叠的三种情况" class="headerlink" title="外边距重叠的三种情况"></a>外边距重叠的三种情况</h3><ol><li>相邻的两个块级盒子，在第一个盒子设置了margin-bottom后第二个盒子设置了margin-top</li><li>三个层级的块盒子，最后一个层级的盒子相对于第二个层级盒子设置margin-top</li><li>三个同级对块盒子，中间对盒子内容为空，想设置margin-top和margin-bottom级来为上下两个盒子制造空隙，将发生外边距崩塌</li></ol><aside>💡 注意，会造成外边距重叠的情况，只有**垂直方向上的块级**盒子</aside><p><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/9c3b13c6-7d16-45c6-8e9a-3c53d1f04126/Untitled.png" alt="Untitled"></p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><ol><li>子绝父相</li><li>inline-block不会造成外边距崩塌，所以可以改成inline-block(改成inline-block后要记得设置宽高)</li><li>设置pisition为relative，然后用top来代替margin-top </li><li>设置float后再来margin-top</li><li>不能设置外边距，那就改成内边距</li><li>添加边框，设置边框厚度</li><li>创建BFC（overflow:hidden会触发创建BFC）</li></ol><h2 id="BFC（block-formating-context-块级格式化上下文）"><a href="#BFC（block-formating-context-块级格式化上下文）" class="headerlink" title="BFC（block formating context 块级格式化上下文）"></a>BFC（block formating context 块级格式化上下文）</h2><p>前端的布局有三种：</p><ol><li>普通流（也是浏览器默认的）<ul><li>块级格式化上下文（BFC，block formatting context）。</li><li>内联格式化上下文（IFC，inline formatting context）。</li><li>弹性格式化上下文（FFC，flex formatting context），在 CSS3 中定义。</li><li>栅格格式化上下文（GFC，grid formatting context），在 CSS3 中定义。</li></ul></li><li>flow布局</li><li>绝对定位</li></ol><p>后两个都会脱离文档流，接下来要讲的BFC，就是属于普通流一种</p><p><strong>BFC会形成独立的渲染区域，使得内部元素的渲染不会影响到外界</strong></p><ol><li>清除浮动 <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//主要代码，为了方便看到效果，给了背景色</span><br><span class="line">// rgb(228, 99, 48)</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content_box&quot;</span>&gt;</span>   </span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./img/selfie.jpg&quot;</span>/&gt;</span></span><br><span class="line"> // rgb(168, 218, 235)</span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;statement&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure> <img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/5265f499-5d87-48f8-8e24-fa5d8a92eb17/Untitled.png" alt="Untitled"> 一般在情况下，都是一边产品图，一边文字说明，这里我们让图片设置为 flow（当然还有其他解决方案，这里是为了方便举例子，其他就不扩展了） <img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/5cdb26bc-b6a4-447d-a958-8f8277f89b3e/Untitled.png" alt="Untitled"> 可以看到flow设置为flow之后，img脱离了文档流，content_box的大小变成只靠两个p来支撑，我们需要的是content_box是img的大小也<strong>影响着</strong>content_box，这种情况下就可以给content_box的css添加<strong>一个属性来触发BFC，因为为了在此情况下不要有太大改变，一般我们使用display:flow-root或者contain:layout（加黑是因为你也可以使用其他属性来触发BFC，比如overflow:hidden)</strong> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.content_box</span> &#123;</span><br><span class="line">      <span class="attribute">display</span>: flow-root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> <img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/7d165bb2-05c8-41a4-8f34-dd9afafdc45e/Untitled.png" alt="Untitled"> <strong>这样就可以清除掉img的 flow:left  所脱离文档流从而影响content_box的整体渲染</strong></li><li><strong>包裹浮动</strong> 还是上面👆的例子，打开控制台，元素里查看以下statement盒子 <img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/65c2edb5-09c6-4a75-99b9-20f01c236242/Untitled.png" alt="Untitled"> 看到这里的p标签还是占着一整行，这样在我们后面调整statement盒子使得文字不要那么贴近图片的时候是很不方便的，比如添加padding-left（ps：调整p的padding/margin也一样） <img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/8e833e90-0dac-4320-94ca-2f725b5e36e8/Untitled.png" alt="Untitled"> <strong>我们也可以给statement添加一个BFC，让statement成为一个独立渲染的区域不影响外部</strong> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.statement</span>&#123;</span><br><span class="line"><span class="attribute">padding-left</span>: <span class="number">2em</span>;</span><br><span class="line"><span class="attribute">display</span>: flow-root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> 再刷新一下 <img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/80da0761-de79-4316-bb00-986e8bb094ed/Untitled.png" alt="Untitled"> 这样就可以使元素（statement）包裹着浮动元素了</li><li><strong>解决margin collapse</strong> 还是上面的例子，p标签太近了，我们添加个属性margin <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line"><span class="attribute">margin</span>: <span class="number">1.7em</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> <img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/fa024b86-4b5f-4d6d-944e-c1add2435284/ezgif-2-50fe72f50912.gif" alt="ezgif-2-50fe72f50912.gif"> 可以看到这里发生了一开始我们提到的外边距重叠（margin collapse），我也提到了这是专门这样子设计的，不是bug，怎么解决呢，没错，上面解决方案的第七个，可以创建一个BFC <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;statement&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        Lorem ipsum dolor sit amet consectetur adipisicing elit. Quisquam</span><br><span class="line">        harum voluptas ullam, quia veniam sunt in maiores optio</span><br><span class="line">        laboriosam, earum minus veritatis deserunt delectus repellendus</span><br><span class="line">        eaque nostrum vitae! Amet, alias.</span><br><span class="line">      <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        Lorem ipsum dolor sit amet consectetur adipisicing elit. Quisquam</span><br><span class="line">        harum voluptas ullam, quia veniam sunt in maiores optio</span><br><span class="line">        laboriosam, earum minus veritatis deserunt delectus repellendus</span><br><span class="line">        eaque nostrum vitae! Amet, alias.</span><br><span class="line">      <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.statement</span> <span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: flow-root;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> 给p套一个div，让这个div形成一个BFC独立渲染 <img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/ef44d4f2-7da1-414e-a079-5ee71048778c/Untitled.png" alt="Untitled"> 这样就可以防止外边距重叠了</li></ol><p>创建BFC有以下（用得比较多得加黑了</p><ol><li><html/> 跟元素</li><li><strong>设置了float属性且值不为none的元素</strong></li><li>绝对定位的元素（position:absolute)</li><li><strong>设置了display:inline-block/ flow-root的元素</strong></li><li>设置了display:table-<em>的元素（例如table-cell、table-caption、table-row*<em>等）</em></em></li><li><strong>设置了overflow值不为visible和clip以外的元素（例如：overflow:hidden)</strong></li><li>设置contain的元素（layout | content | paint)</li><li>flex 和grid布局的子元素（非flex和grid布局容器本身）</li><li>多列布局，设置了column-count的元素，或设置了column-span:all的元素</li></ol><p><strong>提示</strong>：<code>display: flow-root</code>，<code>contain: layout</code> 等是无副作用的，可在不影响已有布局的情况下触发 BFC，所以会用的比较多</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;外边距重叠&quot;&gt;&lt;a href=&quot;#外边距重叠&quot; class=&quot;headerlink&quot; title=&quot;外边距重叠&quot;&gt;&lt;/a&gt;外边距重叠&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;外边距重叠（英文margin collapse，MDN 的解释如下：  块的顶部和底部边距有时合并(折叠</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>nginx反向代理和负载均衡</title>
    <link href="https://oshino.cc/2021/10/16/nginx%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E5%92%8C%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/"/>
    <id>https://oshino.cc/2021/10/16/nginx%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E5%92%8C%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/</id>
    <published>2021-10-16T08:37:28.000Z</published>
    <updated>2021-12-16T08:37:37.587Z</updated>
    
    <content type="html"><![CDATA[<h3 id="认识部分nginx-conf"><a href="#认识部分nginx-conf" class="headerlink" title="认识部分nginx.conf"></a>认识部分nginx.conf</h3><ol><li>文件结构 打开nginx.conf（nginx我用的openresty，集成了一些插件，省大把时间），吧注释的说明都去掉，留下一个整洁的模板，长这样： <figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">worker_processes  <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  <span class="number">1024</span>;</span><br><span class="line">&#125;</span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line">    keepalive_timeout  <span class="number">65</span>;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen       <span class="number">80</span>;</span><br><span class="line">        server_name  localhost;</span><br><span class="line">        location / &#123;</span><br><span class="line">            root html;</span><br><span class="line">index index.html;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> 文件分成三块<ol><li><strong>全局配置模块</strong> 影响nginx 服务器整体运行的配置指令，主要包括配置运行 Nginx 服务器的用户（组）、允许生成的 worker process 数，进程 PID 存放路径、日志存放路径和类型以及配置文件的引入等，worker_processes表示处理并发数，越大处理的越多，不过和硬件等有关</li><li><strong>events配置模块</strong> 主要影响 Nginx 服务器与用户的网络连接，常用的设置包括是否开启对多 work process 下的网络连接进行序列化，是否允许同时接收多个网络连接，选取哪种事件驱动模型来处理连接请求，每个 word process 可以同时支持的最大连接数等。上述表示最大的连接数为1024</li><li><strong>http配置模块（http模块里又分为http全局块和server模块）</strong>这算是 Nginx 服务器配置中最频繁的部分，代理、缓存和日志定义等绝大多数功能和第三方模块的配置都在这里。<ol><li><strong>全局模块</strong> http全局块配置的指令包括文件引入、MIME-TYPE 定义、日志自定义、连接超时时间、单链接请求数上限等。</li><li><strong>server模块（该模块可以有多个，且模块又分为server全局块和location模块）</strong><ol><li><strong>全局块</strong> 最常见的配置是本虚拟机主机的监听配置和本虚拟主机的名称或IP配置。</li><li><strong>location</strong> 一个 server 块可以配置多个 location 块。 这块的主要作用是基于 Nginx  服务器接收到的请求字符串（例如 server_name/uri-string），对虚拟主机名称（也可以是IP别名）之外的字符串（例如 前面的 /uri-string）进行匹配，对特定的请求进行处理。地址定向、数据缓存和应答控制等功能，还有许多第三方模块的配置也在这里进行。</li></ol></li></ol></li></ol> 看上去像这样： <img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/ca9517e6-2cb6-4dea-b5cf-44161fc957d2/Untitled.png" alt="Untitled"></li><li>部分常用字段和功能 该文件是nginx到配置文件<table><thead><tr><th>字段</th><th>功能</th></tr></thead><tbody><tr><td>worker_processes</td><td>指明nginx要开启的进程数</td></tr><tr><td>worker_connections</td><td>单个工作进程可以允许同时建立外部连接的数量</td></tr><tr><td>defult_type</td><td>响应类型：有application/octet-stream(下载)和application/text/html(网页 )</td></tr><tr><td>include</td><td>配置多的时候会分成多个文件，可以用此指令汇总</td></tr><tr><td>sendfile</td><td>提高文件的传输速率，开启后会用sendFile()</td></tr><tr><td>keepalive_timeout</td><td>规定http请求keep-alive持续的时间，不要太大，好释放资源，提高性能</td></tr><tr><td>location</td><td>通过指定模式来与客户端请求的URI相匹配</td></tr><tr><td>server_name</td><td>指明host</td></tr><tr><td>listen</td><td>该字段出现在server里，指明端口号</td></tr><tr><td>error_page</td><td>当发生错误的时候能够显示一个预定义的uri</td></tr><tr><td>proxy_pass</td><td>反向代理字段</td></tr><tr><td>upstream</td><td>负载均衡配置模块</td></tr><tr><td></td><td></td></tr><tr><td>location 匹配规则</td><td></td></tr><tr><td></td><td></td></tr><tr><td>有四个优先级别</td><td></td></tr><tr><td></td><td></td></tr></tbody></table><ol><li>“=”级别最高 <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">location = /a&#123;</span><br><span class="line">echo &quot;this is the most higt level&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>”^~“级别其次 <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">location ^~ /a &#123;</span><br><span class="line">echo &quot;this is the second level&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>“～”级别第三 <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">location ~ /\w &#123;</span><br><span class="line">echo &quot;this is the third level&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>“普通字符串” <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">echo &quot;this is the final level&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li>同优先级别的，匹配程度较高的先匹配</li><li>匹配程度一样的，则写在前面的先匹配</li></ol><p><strong>作为一个前端er，了解这些就够了吧，接下来就进入主菜</strong></p><h3 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h3><p>开启nginx后默认是80端口，我因为端口号被占用，修改成了8080，访问localhost:8080</p><p><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/0a07dd9d-7908-46a0-9a0a-2d3d58d96156/Untitled.png" alt="Untitled"></p><p>我用node自己开了个服务，端口号为8080，访问成功：</p><p><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/ce31c11f-367b-4daa-afc2-8ca73be7d610/Untitled.png" alt="Untitled"></p><p>反向代理我们只需要用到proxy_pass字段，像这样：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  localhost;</span><br><span class="line"># 响应类型改为html</span><br><span class="line">        default_type  text/html;</span><br><span class="line">        location / &#123;</span><br><span class="line">            proxy_pass http://localhost:8080</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/51326170-f9b7-4973-8d7a-fbeab127bd1c/Untitled.png" alt="Untitled"></p><p>可以看到访问默认的80端口，也会因反向代理转到8080端口</p><hr><p><strong>反向代理需要注意的点就是proxy_pass的路径要与location的规则一起用</strong></p><hr><h3 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h3><ul><li><pre><code>      负载均衡的职责是将网络请求，或者其他形式的负载“均摊”到不同的机器上。避免集群中部分服务器压力过大，而另一些服务器比较空闲的情况。      通过负载均衡，可以让每台服务器获取到适合自己处理能力的负载。在为高负载服务器分流的同时，还可以避免资源浪费，一举两得。      负载均衡可分为软件负载均衡和硬件负载均衡。在我们日常开发中，一般很难接触到硬件负载均衡。但软件负载均衡还是比如我们接下来会讲到的ngxin</code></pre></li></ul><p>可以这么配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line">####################################</span><br><span class="line">####### 在这里添加一个upstream 字段####</span><br><span class="line">upstream serverGroups&#123;</span><br><span class="line">server localhost:80;</span><br><span class="line">server localhost:8080;</span><br><span class="line"></span><br><span class="line">    server localhost:8081;</span><br><span class="line">&#125;</span><br><span class="line">####################################</span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  localhost;</span><br><span class="line">        default_type  text/html;</span><br><span class="line">        location / &#123;</span><br><span class="line">####################################</span><br><span class="line"># 在这里啊host替换成上面的upstream名字 #</span><br><span class="line">            proxy_pass http://serverGroups</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>看看效果</p><p><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/a0bc010f-0536-4ee8-9698-d059af1b4511/Untitled.png" alt="Untitled"></p><p>自此，反向代理和负载均衡就大概是这样，我觉得作为前端er了解知道怎么弄就行，不需要去深入了解配置参数啥的</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;认识部分nginx-conf&quot;&gt;&lt;a href=&quot;#认识部分nginx-conf&quot; class=&quot;headerlink&quot; title=&quot;认识部分nginx.conf&quot;&gt;&lt;/a&gt;认识部分nginx.conf&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;文件结构 打开nginx.con</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>回来了回来了</title>
    <link href="https://oshino.cc/2021/10/08/%E6%88%91%E5%9B%9E%E6%9D%A5%E4%BA%86/"/>
    <id>https://oshino.cc/2021/10/08/%E6%88%91%E5%9B%9E%E6%9D%A5%E4%BA%86/</id>
    <published>2021-10-08T15:23:00.000Z</published>
    <updated>2021-12-16T14:52:34.153Z</updated>
    
    <content type="html"><![CDATA[<p>　　我回来了，不知道多久没写博文了，这次开学后打算重拾起我前两年的自制力，想到这我就想到开始写博客。</p><p>　　好了，我换电脑了，m1 mba，这次不想折腾太多（还是要折腾的，我对UI有点要求），wordpress直接pass掉了，由于也不想碰其他平台且在在18年用过hexo，所以这次就直接用hexo了，搭建很快就不罗嗦了，买了个域名oshino.cc也顺便绑定上，这三年不出意外应该都是用这个域名了，我目前用的是github找的主题Anatole，它的主体框架和我想要的一样，后面稳定下来后再拿来DIY吧。</p><p>　　因为课程基本都学会了（没会的我也不感兴趣），所以我打算自己找点事情做，最终想来想去打算自己在这个主题的基础上DIY，故开了这个坑，接下来的阶段是这么打算的：</p><ol><li>需求分析</li><li>设计UI（我不是专业的</li><li>网上查找hexo主题开发的资料，我略微查了一下，普遍都说hexo的文档非常差</li><li>在进行3的同时用vscode进行主题开发</li><li>完善博客，添加插件，博客我打算以阅读为主，所以不出意外只会添加rss和评论这两个</li></ol><p>后续我会不断更新这篇文章</p><blockquote><p>更新于10.06</p></blockquote><h4 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h4><p>　　现在是早上8点多，待会中午要坐车回去学校了，老家到佛山的距离，加上塞车，已经准备好塞个10小时了（高铁票好难买~）</p><p><img src="https://files.catbox.moe/7n5g49.png" alt="blog 需求"></p><p>　　可以看到目前是很简单的一个version，因为是以阅读为主，所以砍掉了很多多余的需求，后面会更加注重文字排版、选文字、行高的细节设计（当然我都是外行人），先用processOn吧模块简要的写出来，方便后面原型UI设计，不用想什么加什么</p><blockquote><p>更新于10.10</p></blockquote><h4 id="原型UI设计"><a href="#原型UI设计" class="headerlink" title="原型UI设计"></a>原型UI设计</h4><p>　　原型UI设计真难啊，虽然我有大概框架，可正真实施下来，还是感觉空荡荡的，少了些什么，先这样子放着吧，看到时候再改进！</p><blockquote><blockquote><p>这是HOME页的，文字用程序生成的，看看就好</p></blockquote></blockquote><p><img src="https://files.catbox.moe/c1bdig.png" alt="HONME"><br><img src="https://files.catbox.moe/75ojvv.png" alt="HOME"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;　　我回来了，不知道多久没写博文了，这次开学后打算重拾起我前两年的自制力，想到这我就想到开始写博客。&lt;/p&gt;
&lt;p&gt;　　好了，我换电脑了，m1 mba，这次不想折腾太多（还是要折腾的，我对UI有点要求），wordpress直接pass掉了，由于也不想碰其他平台且在在18年用</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>跨域</title>
    <link href="https://oshino.cc/2021/03/18/%E8%B7%A8%E5%9F%9F/"/>
    <id>https://oshino.cc/2021/03/18/%E8%B7%A8%E5%9F%9F/</id>
    <published>2021-03-18T15:23:00.000Z</published>
    <updated>2021-12-16T08:35:53.184Z</updated>
    
    <content type="html"><![CDATA[<p>假设一种情景</p><pre><code>我对某网站要搞点小心思，因为对方服务器进不了，所以我把小心思放在我的服务器，封装成一个接口暴露出去，然后等我使用他的网站时，再请求我服务器的接口，搞烂他！ttk !</code></pre><p>我真聪明！</p><p>。。。。。。</p><p>origin cors？好吧这个方法好像行不通，那我换个方法，吧小心思包装成一个软件，在互联网传播，等他服务器下载之后运行，我再植入到他的网站首页的script标签运行，偷偷冲他的网站！！嘿嘿嘿我真聪明！</p><p><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/ea226ddb-8dec-438a-aa33-5ba777467012/Untitled.png" alt="Untitled"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- index.html --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  ooooshino的网站</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="comment">// 我们通过某种手段想让对方网站运行我们的端口的脚本</span></span></span><br><span class="line"><span class="javascript">  fetch(<span class="string">&quot;http://localhost:8081&quot;</span>).then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">&quot;在这里做小动作&quot;</span>);</span></span><br><span class="line"><span class="javascript">  &#125;)</span></span><br><span class="line"><span class="javascript">&lt;/scrip&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/f776d5f2-677f-4dce-b740-94125b2eae84/Untitled.png" alt="Untitled"></p><p>？？？？</p><p>傻逼<strong>浏览器</strong>，阻止我积累战绩！ttk！！！</p><p>以上这些都是跨域导致的错误，跨域是浏览器为了<strong>请求安全</strong>而引入的基于<strong>同源策略</strong>的安全特性，需注意的是，这个跨域报错是<strong>浏览器</strong>的行为，和服务端没有关系，请求是正常返回了，只是卡在了浏览器这边</p><h3 id="同源策略"><a href="#同源策略" class="headerlink" title="同源策略"></a>同源策略</h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/Security/Same-origin_policy">MDN</a>是这样说明的：</p><ul><li>如果两个 URL 的 <a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Protocol">protocol</a>、<a href="https://developer.mozilla.org/en-US/docs/Glossary/Port">port (en-US)</a> (如果有指定的话)和 <a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Host">host</a> 都相同的话，则这两个 URL 是<em>同源</em>。这个方案也被称为“协议/主机/端口元组”，或者直接是 “元组”。（“元组” 是指一组项目构成的整体，双重/三重/四重/五重/等的通用形式）  <img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/5aa890cd-8af9-45ee-98f9-7bc773128316/Untitled.png" alt="Untitled"></li></ul><p>我们上面的情况有host或者port不同，其他不变的情况，都造成了跨域问题</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>目前较为流行的有三种</p><ol><li>cors</li><li>jsonp</li><li>反向代理</li></ol><h3 id="1-CORS通信（Cross-Origin-Resource-Sharing）"><a href="#1-CORS通信（Cross-Origin-Resource-Sharing）" class="headerlink" title="1. CORS通信（Cross-Origin Resource Sharing）"></a>1. CORS通信（Cross-Origin Resource Sharing）</h3><p>cors是http的一部分，它允许服务端来指定哪些主机可以从这个服务端加载资源。采用cors的话只需要服务端修改一下请求头的Access-Control-Allow-Origin字段，该方案涉及到服务端，前端不需要修改，例如上面的例子我们可以改成：</p><p>除了上面这个请求头，添加的时候还有以下选择：</p><table><thead><tr><th>字段</th><th>功能</th></tr></thead><tbody><tr><td>Access-Control-Allow-Origin</td><td>表示允许的来源</td></tr><tr><td>Access-Control-Allow-methods</td><td>表示允许的请求方法</td></tr><tr><td>Access-Control-Allow-Headers</td><td>表示允许的请求头</td></tr><tr><td>Access-Control-Allow-Credentials</td><td>表示允许携带认证信息</td></tr></tbody></table><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">app1.get(<span class="string">&quot;/&quot;</span>, <span class="function">(<span class="params">req, resp</span>) =&gt;</span> &#123;</span><br><span class="line">  resp.header(<span class="string">&quot;Access-Control-Allow-Origin&quot;</span>,<span class="string">&#x27;*&#x27;</span>)</span><br><span class="line"><span class="comment">// 或者直接添加header字段“Access-Control-Allow-*”也可以</span></span><br><span class="line">  resp.send(<span class="string">&quot;嘿嘿嘿，成功访问后我要搞烂你！！！&quot;</span>)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  ooooshino的网站</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="comment">//前端再去访问该api就不会发生跨域问题了</span></span></span><br><span class="line"><span class="javascript">  fetch(<span class="string">&quot;http://localhost:8081&quot;</span>).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">    res.text().then(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">      alert(data);</span></span><br><span class="line"><span class="javascript">    &#125;);</span></span><br><span class="line"><span class="javascript">  &#125;);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/46d36e97-bb09-4bed-bdbc-1c87449d95d8/Untitled.png" alt="Untitled"></p><h3 id="2-jsonp"><a href="#2-jsonp" class="headerlink" title="2. jsonp"></a>2. jsonp</h3><p>JSONP 的原理是利用了浏览器加载 JavaScript 资源文件时不受同源策略的限制而实现的。把我们的请求变成一个资源请求，然后吧”小心思“弄成函数，当作资源请求的参数传入，这样吧函数在服务端处理后又返回去浏览器，就可以了！</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  ooooshino的网站</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">let</span> trick = <span class="function">(<span class="params">data</span>) =&gt;</span> alert(date);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;http://localhost:8081?callback=trick&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">app1.get(<span class="string">&quot;/&quot;</span>, <span class="function">(<span class="params">req, resp</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> trickFunction = req.query.callback;</span><br><span class="line">  resp.send(trickFunction+<span class="string">&quot;(&#x27;嘿嘿嘿，成功访问后我要搞烂你！！！&#x27;)&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/c6388302-e63e-4b16-a948-aee855331ab2/Untitled.png" alt="Untitled"></p><p>也是成功访问到api了</p><h3 id="3-反向代理"><a href="#3-反向代理" class="headerlink" title="3. 反向代理"></a>3. 反向代理</h3><p>我在<a href="https://www.notion.so/Nginx-fdb720c5c3324ba093280b8d92973c0c">这里</a>讲过了，就不多说了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;假设一种情景&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;我对某网站要搞点小心思，因为对方服务器进不了，所以我把小心思放在我的服务器，封装成一个接口暴露出去，然后等我使用他的网站时，再请求我服务器的接口，搞烂他！ttk !
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;我真聪明！&lt;/p&gt;
&lt;p&gt;。。</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>How to relaxing</title>
    <link href="https://oshino.cc/2020/03/18/how%20to%20relaxing/"/>
    <id>https://oshino.cc/2020/03/18/how%20to%20relaxing/</id>
    <published>2020-03-17T19:23:00.000Z</published>
    <updated>2021-12-16T14:47:43.185Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Why-relaxing-is-so-important"><a href="#Why-relaxing-is-so-important" class="headerlink" title="Why relaxing is so important?"></a>Why relaxing is so important<code>?</code></h2><p>最近自我感觉压力是真的大，对应的表现有着：”脑子乱“、“想抛开当前面临的事情”、”食欲不振，伴随而来的体重大幅降低”、”心烦意乱，注意力不集中”等，其他人的表现我倒不清楚。</p><p>不管哪一项，都对我的生活都有着很大的影响，每一天都不变昏昏沉沉的度过已经一两个星期了，许多的事情因此都被我丢在了一旁，上网找了很多如何relaxing的文章，就从这点来讲，你就知道压力有多大了，谁会没事上网找如何放松的文章呢…..呵呵，这次的经历也是头一次感觉放松如此的重要。还有很多事等着我去干呢，时间不等人。</p><p>有了这次抗压能力的up，下次在面对重大压力的时候，自己也许能够更加稳重的处理，这也是人生的一部分吧？<strong>呵呵</strong></p><h2 id="How-to-relaxing"><a href="#How-to-relaxing" class="headerlink" title="How to relaxing?"></a>How to relaxing<code>?</code></h2><p>怎么放松呢？或者说如何让压力满满，回归到积极向上的一面呢？我自己有着以下几点方法</p><ol><li><p>深呼吸</p></li><li><p>听一些曲调起伏不大的纯音乐</p></li><li><p>做点自己喜欢的事情</p></li><li><p>拥抱大自然</p></li><li><p>吧经历和压力的来源记录下来</p></li><li><p>定制一下to do list，然后完成它！</p></li></ol><p>不得不说，深呼吸是有用的，在写这篇文章的时候，已经两天没睡觉了，闭上眼想睡觉的时候，脑子时不时会浮现出自己拿着手机或者其他东西可以扔的东西，用尽自己的力气往角落里扔，同时还有很多人睁大眼睛朝我yelling的画面，而且切换的速度特别快，大概1s就切换了好几十个人了，不知道是不是心理出了问题，这是有暴力倾向吗？唉，每当这时候，睁开眼，看着昏暗的天花板进行深呼吸，那些画面就都没了。</p><p>听音乐真的超级有效，前提是你喜欢听音乐？因为我个人喜欢听音乐，在非看视频的情况下，我的播放器都是时刻在播放的，在此次经历之前，我一有不开心，或者独处，亦或是放松，都是听音乐过来的，然后睡个觉啥压力都没了，spotify有ChilledCow的歌单，一个学习，一个睡觉，两个都很推荐，不过放松的话，还是推荐睡觉的歌单——lofi hip hop music-beats to sleep/chill to，没玩spotify的也可以上404观看，ChilledCow好像是24小时直播？反正我每次上次都看到ChilledCow在直播放着音乐。<strong>把周围的环境整理好，躺在床上，戴上耳机，闭眼细听着音乐，so ralaxing</strong></p><p>做点自己喜欢的事情，我的话打打游戏，KTV大吼大叫，和朋友出去滑滑板，叫他们出来吹吹水喝喝酒，都行，抛开你面临的事情，做你想做的事情</p><p>拥抱大自然，这点真的让我很放松，去到海边，就坐在岸边，看着海浪拍打在沙滩上，或者深山野林，找块石头坐着，听着大自然发出来的声音，这都是能让我一待就是几个小时的场景，事后整个人都会很舒服</p><p>由于隐私问题，把经历记录下来或许很难？因人而异吧，我的话就像我现在这样，把自己对放松的理解整理后写下来，过程中自己也会去想，把自己置入一种身临其境的感觉，来让自己放松放松，其实把你压力来源整理出来，真的有益于你处理压力，从而达到释放压力的效果，这点和抑郁患者的治疗是差不多的，我记得他们是把抑郁的情绪来源记录下来？让自己明白自己为什么会这样，连来源都不知道，你说怎么对症下药，对吧?</p><p>以上都能让我的身心放松，最后一点是在这基础上，让自己已被打乱的生活能更快的进入正轨，没耐心去执行？尝试一下把，长时间坚持下来真的对你生活有很大的帮助。</p><h2 id="有感而发"><a href="#有感而发" class="headerlink" title="有感而发"></a>有感而发</h2><p>现在年轻人的压力是真的大，家庭，学业，社交各方面都有，各方面都担当着不同的角色，同时各方面都能变得很复杂，经历不同对这句话也许看法也不同把。这么多角色，只要一个做不好，随着而来的是单方面的职责，’不孝顺’、’学习不好’、’老是宅着不社交’、’不负责’等等，</p><p>很多人在压力很大的时候，都会有这样的想法，”要是自己是小孩子就好了“、“小孩子没有压力真好”啥的，我也想过，你没想过当然是好，这里只是我的有感而发。</p><p><strong>小孩子没有压力?</strong></p><p>其实并不是这样，只是小孩子并不能察觉到气氛，同时大人在小孩子面前也会减少不必要的行为给小孩子营造负气氛。随着长大，大人逐渐在你面前谈论一些以前没听过的话题，你也逐渐学会看懂气氛，家庭的压力随之而来，前提是前面谈及都是与你有关，与你无关当然不会有所谓的压力。当然很多时候更多的时候间接压力，于成年人面对的直接压力是不一样的，说起来复杂，打住。</p><p>那些早熟的孩子，哪一个不是有过非一般的经历——校园暴力、家庭暴力、恋童癖受害者、性暴力等等，这些经历都会让孩子学会看懂气氛，在察觉到气氛后，做出和别人不同的决定，什么？你说你认识其他早熟的孩子没有经历过这些，确实有不少小孩子、年轻人在看了日漫或者许多流媒体后，在“云体验”不同的故事过后思想变得成熟，这种成熟在和那些真正经历过的人，最终做的决定，我相信是不一样的，<strong>云体验终究是云体验</strong>，当然我也不想一棒子打死，有个例是不一样的，这里我只对比例进行总结，个例是不能反驳比例的。</p><p>最近这几样东西老是围绕着我，我也不在是小孩子，以前没想到的，最近都会静下来好好思考，随着思考不断深入，引申出很多内容，比如真的要好好学习提高学历，提高学历是为了让你见识零一层次的人，同时能到处走走就尽量到处走走把，或许我之后会为了旅行而工作也不一定。每次我们在思考完，老想着找个地方倾述，朋友圈，网易云各种社交类软件，但我想你应该和我有过一样的想法把，就是自己和他们聊不来，发出去也没人懂，如对牛弹琴，我自己不喜欢自己呕心沥血写的东西被人鸟都不鸟的略过，我也是刚刚才想起来我有博客来写，不过写在博客也没人看，真是奇怪的想法，或者我就是想记录下来，写到这里我感觉我的思路已经很乱了，文章都在乱写，想到啥写啥，或许在过阵子来看的话，会觉得很羞耻很搞笑也不一定？呵,就先这样把。</p><p><strong>加油!</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Why-relaxing-is-so-important&quot;&gt;&lt;a href=&quot;#Why-relaxing-is-so-important&quot; class=&quot;headerlink&quot; title=&quot;Why relaxing is so important?&quot;&gt;&lt;/a&gt;W</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>2020计划</title>
    <link href="https://oshino.cc/2020/01/02/2020%E8%AE%A1%E5%88%92/"/>
    <id>https://oshino.cc/2020/01/02/2020%E8%AE%A1%E5%88%92/</id>
    <published>2020-01-02T08:37:28.000Z</published>
    <updated>2021-12-16T14:43:10.881Z</updated>
    
    <content type="html"><![CDATA[<p>今天1月11号了，前两天就回家了，这会才缓过来已经2020了，早上睡醒后刷一刷b站，看到了何同学的总结，让我想起了19年初和前女友写的计划，想过来唠嗑一下，顺便立下新一年的flag。</p><p>一年过去，自己已成独行侠，但19年还是值得回顾的，爬山、学习、放松、穷游、比赛等等，立下的计划基本都完成的差不多了，夸自己一下，真棒。</p><h2 id="增加学习量"><a href="#增加学习量" class="headerlink" title="增加学习量"></a>增加学习量</h2><p>让我惊讶的是，我意识到这一年学习能力提高很多，学习计划我在年初定下的时候，还怕自己学习不来而专门减少了些，但基本都完成了，其中还划水了很多时间，特别是年末，去年那些学习计划在我现在看来也就需要几个月的时间。</p><h2 id="增加锻炼"><a href="#增加锻炼" class="headerlink" title="增加锻炼"></a>增加锻炼</h2><p>对新知识的渴望也是我所惊讶的，一接触到新技术，我就特别想去学，通宵不吃饭，学习的过程中一点时间都不想浪费，也让我更加确定自己想干IT方面的活。不过这也导致身体能力每况愈下，有之前的锻炼打底，身体没那么糟糕，但自己的身体自己清楚，我还是知道抵抗力啥的在下降。今年要多加锻炼！！</p><h2 id="增加抗压能力"><a href="#增加抗压能力" class="headerlink" title="增加抗压能力"></a>增加抗压能力</h2><p>讲真，舆论啥的我根本没在怕，看透很多以为自己抗压能力很不错，但我还是小看了人生。下半年参加两个比赛，都因为没上榜而心情低落，自己正真用心了的努力得不到认可就是这种心情吧，表面笑嘻嘻，半夜人间不值得，经常这样导致学习效率低下，两个比赛失败过来，自己已经慢慢适应了，之后再出现落榜了的话，希望自己能抗住，把悲愤化为力量！！</p><h2 id="接触新媒体"><a href="#接触新媒体" class="headerlink" title="接触新媒体"></a>接触新媒体</h2><p>经常看vlog，偶尔会想vlog和blog的区别，两者载体不一样，但本质都是“记录”，但今年我想尝试用视频的方式的来记录一下日常、工作室学习之类的，所以今年的计划里，有一个拍vlog，至于设备，用手机或者借用一下工作室的相机吧，我很期待自己的vlog！！</p><h2 id="什么才是matrue"><a href="#什么才是matrue" class="headerlink" title="什么才是matrue"></a>什么才是matrue</h2><p>19年的计划里，有这么一个“再懂事点”的计划，一年过了我也不知道现在自己这样算不算懂事，但我不满意。在我看来，年龄的增加、外表的成熟，不一定人就成熟，我自己也不知道怎么定义成熟，但起码是懂事的，懂得一些人情世故，懂得读取气氛，做得出选泽的，过去的几年里，家里的火苗终于在去年变越变越大，今年也许会继续烧下去，或将在这2020年终结，我也在去年意识到，大人们已经不把我看成小孩了。反正现在的我还不够，继续在新的一年成长。</p><h2 id="关心人际"><a href="#关心人际" class="headerlink" title="关心人际"></a>关心人际</h2><p>去年或许是我最“事不关己高高挂起”的一年了，除了学习什么都不想管，也因为这个和前女友分手了，上半年疯狂学，下半年也没差，在下半年意识到自己似乎有些过分，在和朋友出去吃饭，或者正常的人际交往中，总是很随和，之前都是很有主见的人的=-=。今年除了关心人际，还要多照顾自己的想法！</p><h2 id="理财"><a href="#理财" class="headerlink" title="理财"></a>理财</h2><p>这点就不多说了，说多就是泪，理财就是对！</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在便签会记录自己的计划，顺便贴出来吧。</p><p><img src="https://s2.ax1x.com/2020/01/11/lIkMLV.jpg" alt="lIkMLV.jpg"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;今天1月11号了，前两天就回家了，这会才缓过来已经2020了，早上睡醒后刷一刷b站，看到了何同学的总结，让我想起了19年初和前女友写的计划，想过来唠嗑一下，顺便立下新一年的flag。&lt;/p&gt;
&lt;p&gt;一年过去，自己已成独行侠，但19年还是值得回顾的，爬山、学习、放松、穷游、比</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>昨日份壁纸分享</title>
    <link href="https://oshino.cc/2019/12/18/Let&#39;s%20All%20Love%20Lain/"/>
    <id>https://oshino.cc/2019/12/18/Let&#39;s%20All%20Love%20Lain/</id>
    <published>2019-12-18T15:23:00.000Z</published>
    <updated>2021-12-16T14:50:31.357Z</updated>
    
    <content type="html"><![CDATA[<p>前两天补了个老番叫Lain,已经成为我心中的一部神作了</p><p>看了这么多番，主角的人物塑造能让人在事后印象深刻的，在这之前只有我Ryougi Shiki,现在又多了Lain</p><p>太棒了这个番，看完我就迫不及待的去搜壁纸了，现在PC/手机壁纸都是Lain,分享一下PC端的壁纸</p><h2 id="Let’s-All-Love-Lain"><a href="#Let’s-All-Love-Lain" class="headerlink" title="Let’s All Love Lain ! ! !"></a>Let’s All Love Lain ! ! !</h2><p><img src="https://s2.ax1x.com/2020/02/21/3mftUI.png" alt="3mftUI.png"></p><p><img src="https://s2.ax1x.com/2020/02/21/3mfaPP.jpg" alt="3mfaPP.jpg"></p><p><img src="https://s2.ax1x.com/2020/02/21/3mfd8f.png" alt="3mfd8f.png"></p><p><img src="https://s2.ax1x.com/2020/02/21/3mf0xS.png" alt="3mf0xS.png"></p><p><img src="https://s2.ax1x.com/2020/02/21/3mfDKg.png" alt="3mfDKg.png"></p><p><img src="https://s2.ax1x.com/2020/02/21/3mfrrQ.png" alt="3mfrrQ.png"></p><p><img src="https://s2.ax1x.com/2020/02/21/3mf6Vs.png" alt="3mf6Vs.png"></p><p><img src="https://s2.ax1x.com/2020/02/21/3mfRP0.png" alt="3mfRP0.png"></p><p><img src="https://s2.ax1x.com/2020/02/21/3mfWGV.jpg" alt="3mfWGV.jpg"></p><p><img src="https://s2.ax1x.com/2020/02/21/3mf5MF.png" alt="3mf5MF.png"></p><p><img src="https://s2.ax1x.com/2020/02/21/3mfIr4.png" alt="3mfIr4.png"></p><h2 id="图片来源"><a href="#图片来源" class="headerlink" title="图片来源"></a>图片来源</h2><p><a href="https://wall.alphacoders.com/">Wall Alphacoders</a></p><p><a href="https://fauux.neocities.org/">W i r e d   S o u n d</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;前两天补了个老番叫Lain,已经成为我心中的一部神作了&lt;/p&gt;
&lt;p&gt;看了这么多番，主角的人物塑造能让人在事后印象深刻的，在这之前只有我Ryougi Shiki,现在又多了Lain&lt;/p&gt;
&lt;p&gt;太棒了这个番，看完我就迫不及待的去搜壁纸了，现在PC/手机壁纸都是Lain,分</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>最近可好</title>
    <link href="https://oshino.cc/2019/11/22/%E6%9C%80%E8%BF%91%E5%8F%AF%E5%A5%BD/"/>
    <id>https://oshino.cc/2019/11/22/%E6%9C%80%E8%BF%91%E5%8F%AF%E5%A5%BD/</id>
    <published>2019-11-22T08:37:28.000Z</published>
    <updated>2021-12-16T14:49:46.983Z</updated>
    
    <content type="html"><![CDATA[<h1 id="最近可好"><a href="#最近可好" class="headerlink" title="最近可好"></a>最近可好</h1><p>通宵搞得的wordpress也差不多了，还差个域名解析，可能的话后面再对主题进行一定的DIY，但很遗憾的讲由于之前的wordpress没有备份就臭手删掉了/root上的env.txt(我用的是阿里云的wordpress镜像)，导致忘记了密码，且不知什么原因blog访问不了，最后选择了重置wordpress镜像，导致我一年来写的博客数据都没有了，我这个傻子，原来也没有保存一手md文件，算是得了个教训，现在写文章会直接创建md文件进行手写，然后再atl+A copy到wordpress的编辑器再进行发布，就像我现在这样。</p><p>从去年的12月中旬开始搞， 到现在博客也快一年啦，回顾自己所学习的，发现自己学的并不是很多，反而在这里发了很多牢骚 (保持心情舒畅是很关键的！)，最近在学vue.js,基础已经先学完了，也学完Vue-Router，打算写点小项目练练手，后面再把vue的其他扩张知识一起给学习了，Vuex，axios等</p><p>在这立个flag</p><hr><p>未来让自己逐渐走向全栈！</p><hr><p>顺便分享一下棉花糖的新歌Tongue Tied，好听！</p><p>以上！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;最近可好&quot;&gt;&lt;a href=&quot;#最近可好&quot; class=&quot;headerlink&quot; title=&quot;最近可好&quot;&gt;&lt;/a&gt;最近可好&lt;/h1&gt;&lt;p&gt;通宵搞得的wordpress也差不多了，还差个域名解析，可能的话后面再对主题进行一定的DIY，但很遗憾的讲由于之前的word</summary>
      
    
    
    
    
  </entry>
  
</feed>
